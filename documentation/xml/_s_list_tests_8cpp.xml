<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_s_list_tests_8cpp" kind="file" language="C++">
    <compoundname>SListTests.cpp</compoundname>
    <includes refid="_library_8_desktop_8_tests_2pch_8h" local="yes">pch.h</includes>
    <includes local="yes">CppUnitTest.h</includes>
    <includes refid="_s_list_8h" local="yes">SList.h</includes>
    <includes refid="_foo_8h" local="yes">Foo.h</includes>
    <includes refid="_to_string_specialization_8h" local="yes">ToStringSpecialization.h</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="8">
        <label>Foo.h</label>
        <link refid="_foo_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Dev/Students/CH19/Oliver.Thomas/Prog2/source/Library.Desktop.Tests/SListTests.cpp</label>
        <link refid="_s_list_tests_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ToStringSpecialization.h</label>
        <link refid="_to_string_specialization_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pch.h</label>
        <link refid="_library_8_desktop_8_tests_2pch_8h_source"/>
      </node>
      <node id="4">
        <label>SList.h</label>
        <link refid="_s_list_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>CppUnitTest.h</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespace_library_desktop_tests">LibraryDesktopTests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;pch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CppUnitTest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Foo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ToStringSpecialization.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Microsoft::VisualStudio::CppUnitTestFramework;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">FieaGameEngine;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">UnitTests;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">LibraryDesktopTests</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_CLASS(SListTests)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD_INITIALIZE(Initialize)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemCheckpoint(&amp;_startMemState);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD_CLEANUP(Cleanup)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemState<sp/>endMemState,<sp/>diffMemState;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemCheckpoint(&amp;endMemState);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_CrtMemDifference(&amp;diffMemState,<sp/>&amp;_startMemState,<sp/>&amp;endMemState))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemDumpStatistics(&amp;diffMemState);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::Fail(L</highlight><highlight class="stringliteral">&quot;Memory<sp/>Leaks!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Constructor)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>front<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>();<sp/>UNREFERENCED_LOCAL(front);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>back<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>();<sp/>UNREFERENCED_LOCAL(back);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(CopyConstructor)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>copyOfList{<sp/>list<sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>copyOfList.Size());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>copyOfList.Front());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>copyOfList.Back());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab19c823186ed496a5a4101b6f42d63a2" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>copyOfList.Front());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(AssignmentOperator)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{a,<sp/>b,<sp/>c};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>copyOfList;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyOfList<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>copyOfList.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>copyOfList.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>copyOfList.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab19c823186ed496a5a4101b6f42d63a2" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>copyOfList.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(PushFront)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a293d59a714308b399df87bfd867bf5ee" kindref="member">PushFront</ref>(a);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a293d59a714308b399df87bfd867bf5ee" kindref="member">PushFront</ref>(b);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(b,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(PushBack)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(b);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(b,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(PopFront)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{a,<sp/>b,<sp/>c};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(b,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>front<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>();<sp/>UNREFERENCED_LOCAL(front);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>back<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>();<sp/>UNREFERENCED_LOCAL(back);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(PopBack)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{a,<sp/>b,<sp/>c};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a91b79f66495f79599edc2902e3653d55" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(b,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a91b79f66495f79599edc2902e3653d55" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a91b79f66495f79599edc2902e3653d55" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>front<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>();<sp/>UNREFERENCED_LOCAL(front);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>back<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>();<sp/>UNREFERENCED_LOCAL(back);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a91b79f66495f79599edc2902e3653d55" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Clear)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab19c823186ed496a5a4101b6f42d63a2" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Size)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a293d59a714308b399df87bfd867bf5ee" kindref="member">PushFront</ref>(b);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a91b79f66495f79599edc2902e3653d55" kindref="member">PopBack</ref>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(0),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(IsEmpty)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(b);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsFalse(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a34cb5313c89b259392b00521a12b5bf5" kindref="member">IsEmpty</ref>());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Front)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>front<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>();<sp/>UNREFERENCED_LOCAL(front);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>constList{<sp/>list<sp/>};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>constList.Front());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Back)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>back<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>();<sp/>UNREFERENCED_LOCAL(back);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>constList<sp/>{<sp/>list<sp/>};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>constList.Back());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_CrtMemState<sp/>_startMemState;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST_CLASS(SListIteratorTests)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD_INITIALIZE(Initialize)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemCheckpoint(&amp;_startMemState);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD_CLEANUP(Cleanup)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemState<sp/>endMemState,<sp/>diffMemState;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemCheckpoint(&amp;endMemState);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_CrtMemDifference(&amp;diffMemState,<sp/>&amp;_startMemState,<sp/>&amp;endMemState))</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtMemDumpStatistics(&amp;diffMemState);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::Fail(L</highlight><highlight class="stringliteral">&quot;Memory<sp/>Leaks!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Constructor)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iterOne;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iterTwo;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(iterOne,<sp/>iterTwo);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_const_iterator" kindref="compound">SList&lt;Foo&gt;::ConstIterator</ref><sp/>cIterOne;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_const_iterator" kindref="compound">SList&lt;Foo&gt;::ConstIterator</ref><sp/>cIterTwo;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(cIterOne,<sp/>cIterTwo);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>(),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a49d9726b0827e7e4d68920128ecd5a79" kindref="member">cend</ref>(),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a16bbce7b7013036aa0874c5c0a264c50" kindref="member">cbegin</ref>());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c8e9c795ae1ee53ae52b878fec8a8a3" kindref="member">PushBack</ref>(a);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreNotEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>(),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreNotEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a49d9726b0827e7e4d68920128ecd5a79" kindref="member">cend</ref>(),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a16bbce7b7013036aa0874c5c0a264c50" kindref="member">cbegin</ref>());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>()<sp/>!=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a16bbce7b7013036aa0874c5c0a264c50" kindref="member">cbegin</ref>()<sp/>!=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a49d9726b0827e7e4d68920128ecd5a79" kindref="member">cend</ref>());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>cListEmpty;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(cListEmpty.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>(),<sp/>cListEmpty.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>cListFull{<sp/>a<sp/>};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreNotEqual(cListFull.end(),<sp/>cListFull.begin());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::IsTrue(cListFull.begin()<sp/>!=<sp/>cListFull.end());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Iterating)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>();<sp/>iter<sp/>!=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();<sp/>++iter,<sp/>++count)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>count);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>();<sp/>iter<sp/>!=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();<sp/>iter++,<sp/>++count)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(3),<sp/>count);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>emptyIter;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;emptyIter]()<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++emptyIter;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emptyIter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;emptyIter]()<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++emptyIter;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Begin)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>(),<sp/>*list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>(),<sp/>*list.<ref refid="class_fiea_game_engine_1_1_s_list_1a16bbce7b7013036aa0874c5c0a264c50" kindref="member">cbegin</ref>());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>cList{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(cList.Front(),<sp/>*cList.begin());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(End)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data<sp/>=<sp/>*list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();<sp/>UNREFERENCED_LOCAL(data);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list]()<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data<sp/>=<sp/>*list.<ref refid="class_fiea_game_engine_1_1_s_list_1a49d9726b0827e7e4d68920128ecd5a79" kindref="member">cend</ref>();<sp/>UNREFERENCED_LOCAL(data);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>cList{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;cList]()<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>data<sp/>=<sp/>*cList.end();<sp/>UNREFERENCED_LOCAL(data);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(InsertAfter)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>d{<sp/>40<sp/>};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>newIter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c19120a5a04b1697ab93b06c0b9eba6" kindref="member">InsertAfter</ref>(d,<sp/>iter);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(4),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(d,<sp/>*newIter);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a435af37ddf7472e52bf9a37b3feeda2b" kindref="member">PopFront</ref>();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(d,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>endIter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newIter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c19120a5a04b1697ab93b06c0b9eba6" kindref="member">InsertAfter</ref>(d,<sp/>endIter);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(4),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(d,<sp/>*newIter);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(d,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>emptyIter;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list,<sp/>&amp;d,<sp/>&amp;emptyIter]()<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>failedIter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a1c19120a5a04b1697ab93b06c0b9eba6" kindref="member">InsertAfter</ref>(d,<sp/>emptyIter);<sp/>UNREFERENCED_LOCAL(failedIter);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Find)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a2cffb24f42c797014c25efc969b9f1d2" kindref="member">Find</ref>(a);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>*iter);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>d{40};</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a2cffb24f42c797014c25efc969b9f1d2" kindref="member">Find</ref>(d);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>(),<sp/>iter);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>cList{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_const_iterator" kindref="compound">SList&lt;Foo&gt;::ConstIterator</ref><sp/>cIter<sp/>=<sp/>cList.Find(a);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(a,<sp/>*cIter);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cIter<sp/>=<sp/>cList.Find(d);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(cList.end(),<sp/>cIter);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_METHOD(Remove)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>a{<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>b{<sp/>20<sp/>};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_unit_tests_1_1_foo" kindref="compound">Foo</ref><sp/>c{<sp/>30<sp/>};</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list" kindref="compound">SList&lt;Foo&gt;</ref><sp/>list{<sp/>a,<sp/>b,<sp/>c<sp/>};</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_fiea_game_engine_1_1_s_list_1_1_iterator" kindref="compound">SList&lt;Foo&gt;::Iterator</ref><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a18e6ebba1edb94c69e935539b776e256" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a76c38208f13756cf116fa62efe12ec67" kindref="member">Remove</ref>(b);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab7d65fd2fe00887c8fcc2aebb04ce070" kindref="member">RemoveAt</ref>(iter);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(1),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa185aa6310f6af6cbe3753248f1d240f" kindref="member">Front</ref>());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(c,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a693192b5747633545b12d470a1e6cf45" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::ExpectException&lt;std::runtime_error&gt;([&amp;list,<sp/>&amp;iter]()<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab7d65fd2fe00887c8fcc2aebb04ce070" kindref="member">RemoveAt</ref>(iter);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a293d59a714308b399df87bfd867bf5ee" kindref="member">PushFront</ref>(b);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a293d59a714308b399df87bfd867bf5ee" kindref="member">PushFront</ref>(a);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a2cffb24f42c797014c25efc969b9f1d2" kindref="member">Find</ref>(c);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1ab7d65fd2fe00887c8fcc2aebb04ce070" kindref="member">RemoveAt</ref>(iter);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(2),<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1a499af769660582135a2bce21f9e211f3" kindref="member">Size</ref>());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert::AreEqual(b,<sp/>list.<ref refid="class_fiea_game_engine_1_1_s_list_1aa198dd169c528edc1ef98a8e01530185" kindref="member">Back</ref>());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_CrtMemState<sp/>_startMemState;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Dev/Students/CH19/Oliver.Thomas/Prog2/source/Library.Desktop.Tests/SListTests.cpp"/>
  </compounddef>
</doxygen>
